<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += 8;
y += 8;

//variables
z = 0;
x_speed = 0;
y_speed = 0;
z_speed = 0;
x_move = 0;
y_move = 0;
grav = 0;
spin = 0;

angle = 0;
sprite = spr_rd;
animate = 0;
step = true;

//constants
accel = 1;
deccel = 1/2;
max_speed = 3;
max_z_speed = 1;
max_grav = 0.2;
ice_mod = 1/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_die, 0, false);

var part = instance_create(x, y, obj_part);
part.sprite = spr_rd_part;
for (var i = 0; i &lt; 2; i++) {
    var part = instance_create(x, y, obj_part);
    part.sprite = spr_rd_part;
    part.frame = 1;
}
for (var i = 0; i &lt; 2; i++) {
    var part = instance_create(x, y, obj_part);
    part.sprite = spr_rd_part;
    part.frame = 2;
}

obj_control.alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ground movement

var friction_mod = 1;
if (place_meeting(x, y, obj_ice)) {
    if (spin &gt; 3) {
        audio_play_sound(snd_no_spin, 0, false);
        spin = 3;
    }
    friction_mod = ice_mod;
}

if (keyboard_check(vk_left))
    x_speed -= accel * friction_mod;
if (keyboard_check(vk_right))
    x_speed += accel * friction_mod;

var prev_sign = sign(x_speed);
x_speed -= sign(x_speed) * deccel * friction_mod;
if (sign(x_speed) != prev_sign)
    x_speed = 0;

if (abs(x_speed) &gt; max_speed)
    x_speed = sign(x_speed) * max_speed;
    
if (keyboard_check(vk_up))
    y_speed -= accel * friction_mod;
if (keyboard_check(vk_down))
    y_speed += accel * friction_mod;
    
var prev_sign = sign(y_speed);
y_speed -= sign(y_speed) * deccel * friction_mod;
if (sign(y_speed) != prev_sign)
    y_speed = 0;
    
if (abs(y_speed) &gt; max_speed)
    y_speed = sign(y_speed) * max_speed;
    
var len = sqrt(sqr(x_speed) + sqr(y_speed));
if (len == 0) {
    x_move = 0;
    y_move = 0;
}
else {
    x_move = (x_speed / abs(len)) * abs(x_speed);
    y_move = (y_speed / abs(len)) * abs(y_speed);
}
    
if (place_free(x + x_move, y))
    x += x_move;
else if (x_move != 0) {
    move_contact_solid(90 - 90 * sign(x_move), abs(x_move));
    x_speed = 0;
}
if (place_free(x, y + y_move))
    y += y_move;
else if (y_move != 0){
    move_contact_solid(-90 * sign(y_move), abs(y_move));
    y_speed = 0;
}

//wind

var wind = instance_place(x, y, obj_wind);
if (instance_exists(wind)) {
    dir = wind.dir;
    push = wind.push;
    if (place_free(x + lengthdir_x(push, dir), y + lengthdir_y(push, dir))) {
        x += lengthdir_x(push, dir);
        y += lengthdir_y(push, dir);
    }
}

//air movement

if (keyboard_check_pressed(ord('A')) &amp;&amp; z == 0 &amp;&amp; spin == 0) {
    audio_play_sound(snd_jump, 0, false);
    z_speed = -max_z_speed;
}

z_speed += grav;
z += z_speed;

if (z &lt; 0 || !(place_meeting(x, y, obj_floor) || place_meeting(x, y, obj_collapse))) {
    grav = max_grav;
}
else {
    if (z_speed &gt; 0)
        audio_play_sound(snd_land, 0, false);
    z = 0;
    z_speed = 0;
    grav = 0;
}

if (z &gt; 0)
    instance_destroy();
    
//spin attack

var spin_pressed, spin_limit;

if (global.ultra_spin) {
    spin_pressed = keyboard_check(ord('S'));
    spin_limit = 4;
}
else {
    spin_pressed = keyboard_check_pressed(ord('S'));
    spin_limit = 0;
}

if (spin &gt; 0) {
    spin -= 0.5;
}
if (spin_pressed &amp;&amp; z == 0 &amp;&amp; spin &lt;= spin_limit) {
    if (friction_mod == ice_mod) {
        audio_play_sound(snd_no_spin, 0, false);
        spin = 3;
    }
    else {
        audio_play_sound(snd_spin, 0, false);
        spin = 8;
    }
}
if (grav != 0)
    spin = 0;
if (spin &gt; 4)
    instance_create(x, y, obj_spin);

//animation

if (spin &gt; 0) {
    sprite = spr_rd_spin;
    animate = 8 - spin;
}
else if (z &lt; 0) {
    /*if (sprite != spr_rd_jump)
        animate = 0;*/
    sprite = spr_rd_jump2;
    /*animate += 0.75;
    if (animate &gt;= 8)
        animate -= 8;*/
}
else if (x_speed != 0 || y_speed != 0) {
    sprite = spr_rd_run;
    angle = point_direction(0, 0, x_speed, y_speed);
    animate += sqrt(sqr(x_move) + sqr(y_move)) / 4;
    if (floor(animate) == 3 || floor(animate) == 11) {
        if (step)
            audio_play_sound(snd_step, 0, false);
        step = false;
    }
    else
        step = true;
    if (animate &gt;= 16)
        animate -= 16;
}
else {
    sprite = spr_rd;
    animate = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_money">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.spd == 0) {
    var sound = audio_play_sound(snd_collect, 0, false);
    audio_sound_pitch(sound, 0.75 + random(0.5));
    global.money++;
    with (other)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ghost">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_complete, 0, false);

global.room_index++;
if (global.room_index &lt; ds_list_size(global.room_list))
    room_goto(ds_list_find_value(global.room_list, global.room_index));
else
    room_goto(rm_level_select);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite, animate, round(x), round(y), 1 - 0.2 * z / max_z_speed, 1 - 0.2 * z / max_z_speed, angle, c_white, 1);

//draw_text(16, 16, string(x_move));
//draw_text(16, 32, string(y_move));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
